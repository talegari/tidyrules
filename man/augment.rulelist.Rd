% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/augment.R
\name{augment.rulelist}
\alias{augment.rulelist}
\title{Augment a \link{rulelist}}
\usage{
\method{augment}{rulelist}(x, new_data, y_name, weight = 1L, ...)
}
\arguments{
\item{x}{A \link{rulelist}}

\item{new_data}{(dataframe) with column named \code{y_name} present}

\item{y_name}{(string) Column name representing the dependent variable}

\item{weight}{(numeric, default: 1) Positive weight vector with length equal
to one or number of rows of 'new_data'}

\item{...}{(expressions) To be send to \link[tidytable:summarize]{tidytable::summarise} for custom
aggregations. See examples.}
}
\value{
A \link{rulelist} with a new dataframe-column named \code{augmented_stats}.
}
\description{
\code{augment} outputs a \link{rulelist} with an additional column named
\code{augmented_stats} based on summary statistics calculated using \code{new_data}.
}
\details{
The dataframe-column \code{augmented_stats} will have these columns
corresponding to the \code{estimation_type}:
\itemize{
\item For \code{regression}: \code{support}, \code{IQR}, \code{RMSE}
\item For \code{classification}: \code{support}, \code{confidence}, \code{lift}
}

All these metrics are computed in a weighted sense. Arg \code{weight} is 1 by
default.
}
\examples{
# Examples for augment ------------------------------------------------------
library("magrittr")

# C5 ----
att = modeldata::attrition
set.seed(100)
train_index = sample(c(TRUE, FALSE), nrow(att), replace = TRUE)

model_c5 = C50::C5.0(Attrition ~., data = att[train_index, ], rules = TRUE)
tidy_c5  = tidy(model_c5)
tidy_c5

# augment
augmented = augment(tidy_c5, new_data = att[!train_index, ], y_name = "Attrition")

augmented \%>\%
  tidytable::unnest(augmented_stats, names_sep = "__") \%>\%
  tidytable::glimpse()

# augment with custom aggregator
augmented =
  augment(tidy_c5,
          new_data = att[!train_index, ],
          y_name = "Attrition",
          output_counts = list(table(Attrition))
          )

augmented \%>\%
  tidytable::unnest(augmented_stats, names_sep = "__") \%>\%
  tidytable::glimpse()

# rpart ----
set.seed(100)
train_index = sample(c(TRUE, FALSE), nrow(iris), replace = TRUE)

model_class_rpart = rpart::rpart(Species ~ ., data = iris[train_index, ])
tidy_class_rpart  = tidy(model_class_rpart)
tidy_class_rpart

model_regr_rpart = rpart::rpart(Sepal.Length ~ ., data = iris[train_index, ])
tidy_regr_rpart  = tidy(model_regr_rpart)
tidy_regr_rpart

#' augment (classification case)
augmented =
  augment(tidy_class_rpart,
          new_data = iris[!train_index, ],
          y_name = "Species"
          )
augmented

augmented \%>\%
  tidytable::unnest(augmented_stats, names_sep = "__") \%>\%
  tidytable::glimpse()

#' augment (regression case)
augmented =
  augment(tidy_regr_rpart,
          new_data = iris[!train_index, ],
          y_name = "Sepal.Length"
          )
augmented

augmented \%>\%
  tidytable::unnest(augmented_stats, names_sep = "__") \%>\%
  tidytable::glimpse()

# party ----
pen         = palmerpenguins::penguins
set.seed(100)
train_index = sample(c(TRUE, FALSE), nrow(pen), replace = TRUE)

model_class_party = partykit::ctree(species ~ ., data = pen[train_index, ])
tidy_class_party  = tidy(model_class_party)
tidy_class_party

model_regr_party = partykit::ctree(bill_length_mm ~ ., data = pen[train_index, ])
tidy_regr_party  = tidy(model_regr_party)
tidy_regr_party

#' augment (classification case)
augmented =
  augment(tidy_class_party,
          new_data = pen[!train_index, ],
          y_name = "species"
          )
augmented

augmented \%>\%
  tidytable::unnest(augmented_stats, names_sep = "__") \%>\%
  tidytable::glimpse()

#' augment (regression case)
augmented =
  augment(tidy_regr_party,
          new_data = tidytable::drop_na(pen[!train_index, ], bill_length_mm),
          y_name = "bill_length_mm"
          )
augmented

augmented \%>\%
  tidytable::unnest(augmented_stats, names_sep = "__") \%>\%
  tidytable::glimpse()

# cubist ----
att         = modeldata::attrition
set.seed(100)
train_index = sample(c(TRUE, FALSE), nrow(att), replace = TRUE)
cols_att    = setdiff(colnames(att), c("MonthlyIncome", "Attrition"))

model_cubist = Cubist::cubist(x = att[train_index, cols_att],
                              y = att[train_index, "MonthlyIncome"]
                              )

tidy_cubist = tidy(model_cubist)
tidy_cubist

augmented =
  augment(tidy_cubist,
          new_data = att[!train_index, ],
          y_name = "MonthlyIncome"
          )
augmented

augmented \%>\%
  tidytable::unnest(augmented_stats, names_sep = "__") \%>\%
  tidytable::glimpse()

}
\seealso{
\link{rulelist}, \link{tidy}, \link[=augment.rulelist]{augment}, \link[=predict.rulelist]{predict}

Other Augment: 
\code{\link{augment}()}
}
\concept{Augment}
